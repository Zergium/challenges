

DONE

https://leetcode.com/problems/coin-change/
https://leetcode.com/problems/unique-paths/
https://leetcode.com/problems/concatenate-words/
https://leetcode.com/problems/course-schedule-ii/
https://leetcode.com/problems/word-ladder/

TODO


https://leetcode.com/problems/kth-largest-element-in-an-array/

https://leetcode.com/problems/word-break/

https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/
https://leetcode.com/problems/expressive-words/


Disjoint Sets using union by rank and path compression Graph Algorithm
https://www.youtube.com/watch?v=ID00PMy0-vE
https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/discuss/?currentPage=1&orderBy=most_votes&query=


https://leetcode.com/problems/campus-bikes/


G

median of two sorted array
Group Shifted Strings
Flatten a Multilevel Doubly Linked List
Redundant connection II
Bulls and Cows
Guess the word
Recover Binary Search Tree



fb

Binary Tree Maximum Path Sum
Combination I & II
Valid Palindrome II & III
Subarray Sum Equals K
Product of Array Except Self
Next Permutation

ms

Trapping Rain Water
Regular expression matching
Word search II
Maximum Width of Binary Tree
Shortest Path in Binary Matrix




3. Prepare elementary math concepts

Sometimes some elementary math comes into play. You may need them in certain questions. The examples are but not limited to:

Geometry (Slope, Areas, Perimeters, Vectors, Matrices, Orthogonality)
Characters Encoding (ASCII, bit representations)
Common distance formula (L1 norm, L2 norm)
Distributions (Uniform Distribution, Random Sampling)
4. Be ready to discuss scalability/distributed system-related quetions

If you are very good to be reaching this stage, you will probably need these mindsets to further increase your chance of passing.

Common questions regarding these topics are:

What if now I have a very very large input and I need to run the algorithm many many times? How do you optimize it?
I made an example for 973. K Closest Points to Origins
(https://leetcode.com/problems/k-closest-points-to-origin/discuss/576025/python-3-lines-knn-search-using-kd-tree-for-large-number-of-queries)
What if I have a lot of computers as resources? How would you optimize the algorithm given such resources?
Some strategies to address the above questions are but not limited to:

Time-space trade off (Use alternative DS such that more memory is taken but less time cost for each run)
Pre-processing tactics (A higher time complexity for pre-processing is fine as you only need to pre-process once, but then later on have much better time cost for each run)
Concurrency optimization (Map Reduce, Multi-threads, etc)